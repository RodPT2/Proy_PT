#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>    // libreria pa I2C
#include <SPI.h>
#include <RF24.h>
#include "Adafruit_CCS811.h"
#include "DHT.h"

// *********************** CO2 ***********************
Adafruit_CCS811 ccs;
float co2=0;

// *********************** DHT ***********************
#define DHTPIN 32     
#define DHTTYPE DHT11   
DHT dht(DHTPIN, DHTTYPE); //recibe pin de datos, modelo de sensor a usar
float t=0;
float h=0;

// *********************** leds semáforo ***********************
int led_R = 12;
int led_G = 27;
int led_B = 14;

// *********************** Datos de red ***********************
const char* ssid="Rod_Guest";
const char* pswd="12345678";

String payload= "";
String url = "http://aire-co2.000webhostapp.com/conex.php";

RF24 radio(4, 5); //CE CSN
float data[4];

void lectura_co2();
void lectura_DHT();
void color(int co2);
void Rx_Data();
void Tx_Data();

void setup() {
  Serial.begin(115200);
  Wire.begin();  // Habilitamos la conexión I2C
  radio.begin();  //Habilitamos la antena de Rx
  radio.setChannel(5); //CH con el q trabajaremos
  radio.setDataRate (RF24_1MBPS);
  radio.setPALevel (RF24_PA_HIGH);
  radio.openReadingPipe(1, 0x1234567890LL);
  radio.startListening();
    
  if(!ccs.begin()){
      Serial.println("Error al conectar el sensor CSS! Checar cableado");
      while(1);
  }
  
  dht.begin(); //inic sensor

  WiFi.begin(ssid, pswd);
  Serial.println("Conectando...");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println(".");
  }
  
  Serial.println("WiFi conectado: ");
  Serial.println(WiFi.localIP());
  
  pinMode(led_R,OUTPUT);
  pinMode(led_G,OUTPUT);
  pinMode(led_B,OUTPUT);
  
  Serial.println("Proceso de burning, espere 6 min para sensar.");
    digitalWrite(led_R,0);
    digitalWrite(led_G,255);
    digitalWrite(led_B,0);
    delay(420000);
}

void loop() {
  lectura_co2();
  color(co2);
  lectura_DHT();
// Rx_Data();
  Tx_Data();
  delay(30000); 
}

void lectura_co2(){
    if(!ccs.readData()){
       co2= ccs.geteCO2();
     // Serial.print("CO2: "); Serial.print(co2); Serial.println(""); 
    }
    else{
      Serial.println("ERROR!");
      while(1);
    }
}

void color(int co2){
  //Serial.println(co2);
  if(co2>399 && co2<700)  { //Verde
    digitalWrite(led_R,0);
    digitalWrite(led_G,0);
    digitalWrite(led_B,255);
  }
  
  if(co2>=700 && co2<1000){ //Blanco
    digitalWrite(led_R,255);
    digitalWrite(led_G,255);
    digitalWrite(led_B,255);
  }
  
  if(co2>1000){ //Rojo
    digitalWrite(led_R,255);
    digitalWrite(led_G,0);
    digitalWrite(led_B,0);
  }
}
  
void lectura_DHT(){ 
  h = dht.readHumidity();
  t = dht.readTemperature(); // por default se mide en °C
  
  if (isnan(h) || isnan(t)) { //isnan verifica q el númro devuelto sea un numero valido i.e. que la lectura no haya fallado
    Serial.println(F("Error al leer el sensor DHT"));
    return;
  }
  Serial.print("Temperatura: ") ; Serial.print(t) ; Serial.print(" °C"); Serial.println("");
  Serial.print("humedad: ") ; Serial.print(h) ; Serial.print(" %") ; Serial.println("");
}

void Rx_Data(){
  if(radio.available()){
    radio.read(&data,sizeof(data));
    t=data[0];
    h= data[1];
    Serial.print("H: ");
    Serial.print(h);
    Serial.print(" Temperatura: ");
    Serial.print(t);
    Serial.println(" ");
  }
}


void Tx_Data(){
 HTTPClient http;
 String data_Tx="co2_PPM="+ String(co2) +" &t="+ String(t) +" &h=" + String (h);    
 
 http.begin(url);
 http.addHeader("Content-Type", "application/x-www-form-urlencoded");

 int httpCode=http.POST(data_Tx);
 payload=http.getString(); //respuesta del servidor
 Serial.print("Servidor dice: "); Serial.println(payload);
}
